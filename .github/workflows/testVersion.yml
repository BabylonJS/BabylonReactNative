name: Test RN/BRN Version
on:
  workflow_dispatch:
    inputs:
      RN_Version:
        description: 'ReactNative Version'
        required: true 
        type: string
        default: '0.69.0'
      BRN_Version:
        description: 'Babylon ReactNative Version'
        required: true 
        type: string
        default: '0-69'

jobs:

#  build-windows:
#    runs-on: windows-2019
#    steps:
#    - name: Add msbuild to PATH
#      uses: microsoft/setup-msbuild@v1.1
#    - name: Build Playground Windows x64
#      run: |
#        npx react-native init Playground --version ${{ github.event.inputs.RN_Version }}
#        cd Playground
#        npm install @babylonjs/core
#        npm install @babylonjs/loaders
#        npm install @babylonjs/react-native
#        npm install @babylonjs/react-native-iosandroid-${{ github.event.inputs.BRN_Version }}
#        npx react-native-windows-init --overwrite
#        msbuild.exe /r "./windows/Playground.sln"
#        msbuild.exe /p:Configuration="Release" /p:Platform="x64" /m "./windows/Playground.sln"
#
#    - name: Upload UWP x64
#      uses: actions/upload-artifact@v2
#      with:
#        name: 'WindowsUWPx64'
#        path: Playground/windows/x64/Release/Playground

  build-android:
    runs-on: ubuntu-latest
    steps:
    - name: Build Playground Android
      run: |
        npx react-native init Playground --version ${{ github.event.inputs.RN_Version }}
        cd Playground
        npm install @babylonjs/core
        npm install @babylonjs/loaders
        npm install @babylonjs/react-native
        npm install @babylonjs/react-native-iosandroid-${{ github.event.inputs.BRN_Version }}
        cd android
        ./gradlew app:assembleRelease --stacktrace --info

    - name: Upload APK
      uses: actions/upload-artifact@v2
      with:
        name: 'AndroidAPK'
        path: Playground/android/app/build/outputs/apk/release/app-release.apk

  test-android:
    needs: [build-android]
    runs-on: macos-latest
    steps:
    - name: Download APK
      uses: actions/download-artifact@v2
      with:
        name: 'AndroidAPK'
        path: ./
    - name: Install Android Emulator
      run: |
        echo Install Android image
        echo "y" | $ANDROID_HOME/tools/bin/sdkmanager --install "system-images;android-27;default;x86_64"
        echo "y" | $ANDROID_HOME/tools/bin/sdkmanager --licenses
        echo Create AVD
        $ANDROID_HOME/tools/bin/avdmanager create avd -n Pixel_API_27 -d pixel -k "system-images;android-27;default;x86_64"

    - name: Start emulator
      run: |
        echo Start emulator
        nohup $ANDROID_HOME/emulator/emulator -avd Pixel_API_27 -gpu host -no-audio -no-boot-anim -camera-back none -camera-front none -qemu -m 2048 2>&1 &
        echo Wait for emulator
        adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed | tr -d '\r') ]]; do echo "."; sleep 1; done; input keyevent 82'
        adb devices

    - name: Install & Run .APK
      run: |
        adb install -t ./app-release.apk
        adb shell am start -n com.playground/com.playground.MainActivity
        # wait not ready
        adb wait-for-device shell 'while [[ -z $(pidof com.playground | tr -d '\r') ]]; do echo "."; sleep 1; done; input keyevent 82'
        # wait a bit more
        sleep 10
        # check it's still alive
        if [[ -z "$(pidof com.playground | tr -d '\r')" ]]; then echo "com.playground is not running."; exit(1); fi

  package:
    #needs: [build-windows, build-android]
    needs: [test-android]
    runs-on: macos-latest
    steps:
      - name: Gather 
        run: |
          ls -l -a