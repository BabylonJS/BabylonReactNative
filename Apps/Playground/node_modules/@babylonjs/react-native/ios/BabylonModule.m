#import <Foundation/Foundation.h>
#import <React/RCTBridgeModule.h>
#import <React/RCTEventEmitter.h>
#import <React/RCTViewManager.h>
#import <CommonCrypto/CommonHMAC.h>

#import <JavaScriptCore/JavaScriptCore.h>
#import <React/RCTBridge+Private.h>

@interface RCT_EXTERN_MODULE(BabylonModule, NSObject)

RCT_EXTERN_METHOD(initialize:(RCTPromiseResolveBlock)resolve reject:(RCTPromiseRejectBlock)reject)

RCT_EXTERN_METHOD(whenInitialized:(RCTPromiseResolveBlock)resolve reject:(RCTPromiseRejectBlock)reject)

RCT_EXTERN__BLOCKING_SYNCHRONOUS_METHOD(syncTest)

RCT_EXPORT_METHOD(initialize2:(RCTPromiseResolveBlock)resolve reject:(RCTPromiseRejectBlock)reject)
{
  resolve(false);
}

//@interface BabylonModule : NSObject <RCTBridgeModule>
//
//@end
//
//@implementation BabylonModule
//
//RCT_EXPORT_MODULE()
//
//@synthesize bridge = _bridge;
//
//RCT_EXPORT_METHOD(initialize:(RCTPromiseResolveBlock)resolve reject:(RCTPromiseRejectBlock)reject)
//{
//  resolve(false);
//}
//
//RCT_EXPORT_METHOD(whenInitialized:(RCTPromiseResolveBlock)resolve reject:(RCTPromiseRejectBlock)reject)
//{
//  resolve(false);
//}
//
//RCT_EXPORT_BLOCKING_SYNCHRONOUS_METHOD(syncTest)
//{
//    return nil;
//}

RCT_EXPORT_BLOCKING_SYNCHRONOUS_METHOD(syncTest2)
{
    NSRunLoop* jsRunLoop = [NSRunLoop currentRunLoop];
    [jsRunLoop performBlock:^{
        int x = 5;
    }];
    
    JSContext* jsContext = [JSContext currentContext];
    JSGlobalContextRef jsContextRef = [jsContext JSGlobalContextRef];
    
    RCTBridge* bridge = self.bridge;
    RCTCxxBridge* cxxBridge = (RCTCxxBridge*)bridge;
    void* jsiRuntime = cxxBridge.runtime;
    
    return nil;
}

@end


@interface RCT_EXTERN_MODULE(EngineViewManager, RCTViewManager)

@end
