#import <Foundation/Foundation.h>
#import <UIKit/UIKit.h>
#import <MetalKit/MetalKit.h>

#import <React/RCTBridgeModule.h>
#import <React/RCTEventEmitter.h>
#import <React/RCTViewManager.h>
#import <CommonCrypto/CommonHMAC.h>

#import <JavaScriptCore/JavaScriptCore.h>
#import <React/RCTBridge+Private.h>

#import "BabylonNative.h"
#import "BabylonNativeInterop.h"

@interface BabylonModule : NSObject <RCTBridgeModule>
@end

@implementation BabylonModule

RCT_EXPORT_MODULE();

@synthesize bridge = _bridge;

RCT_EXPORT_METHOD(initialize:(RCTPromiseResolveBlock)resolve reject:(RCTPromiseRejectBlock)reject)
{
    [BabylonNativeInterop whenInitialized:self.bridge resolve:resolve];
}

RCT_EXPORT_METHOD(whenInitialized:(RCTPromiseResolveBlock)resolve reject:(RCTPromiseRejectBlock)reject)
{
    [BabylonNativeInterop whenInitialized:self.bridge resolve:resolve];
}

@end




@interface RCT_EXTERN_MODULE(BabylonModule2, NSObject)

RCT_EXTERN_METHOD(initialize:(RCTPromiseResolveBlock)resolve reject:(RCTPromiseRejectBlock)reject)

RCT_EXTERN_METHOD(whenInitialized:(RCTPromiseResolveBlock)resolve reject:(RCTPromiseRejectBlock)reject)

//@interface BabylonModule : NSObject <RCTBridgeModule>
//
//@end
//
//@implementation BabylonModule
//
//RCT_EXPORT_MODULE()
//
//@synthesize bridge = _bridge;
//
//RCT_EXPORT_METHOD(initialize:(RCTPromiseResolveBlock)resolve reject:(RCTPromiseRejectBlock)reject)
//{
//  resolve(false);
//}
//
//RCT_EXPORT_METHOD(whenInitialized:(RCTPromiseResolveBlock)resolve reject:(RCTPromiseRejectBlock)reject)
//{
//  resolve(false);
//}
//
//RCT_EXPORT_BLOCKING_SYNCHRONOUS_METHOD(syncTest)
//{
//    return nil;
//}

RCT_EXPORT_BLOCKING_SYNCHRONOUS_METHOD(syncTest2)
{
    NSRunLoop* jsRunLoop = [NSRunLoop currentRunLoop];
    [jsRunLoop performBlock:^{
        int x = 5;
    }];
    
    JSContext* jsContext = [JSContext currentContext];
    JSGlobalContextRef jsContextRef = [jsContext JSGlobalContextRef];
    
    RCTBridge* bridge = self.bridge;
    RCTCxxBridge* cxxBridge = (RCTCxxBridge*)bridge;
    auto jsiRuntime = reinterpret_cast<facebook::jsi::Runtime*>(cxxBridge.runtime);
    
    //auto x = std::make_unique<Babylon::Native>(jsiRuntime, nullptr, 0, 0);
    
    return nil;
}

@end




@interface EngineView : MTKView
@end

@implementation EngineView {
    RCTBridge* bridge;
    //CFRunLoopRef runLoop;
    NSRunLoop* runLoop;
    BOOL initialized;
}

//- (instancetype)init:(RCTBridge*)_bridge runLoop:(CFRunLoopRef)_runLoop {
- (instancetype)init:(RCTBridge*)_bridge runLoop:(NSRunLoop*)_runLoop {
    if (self = [super initWithFrame:CGRectZero device:MTLCreateSystemDefaultDevice()]) {
        bridge = _bridge;
        runLoop = _runLoop;
        initialized = false;
        
        super.translatesAutoresizingMaskIntoConstraints = false;
        super.colorPixelFormat = MTLPixelFormatBGRA8Unorm_sRGB;
        super.depthStencilPixelFormat = MTLPixelFormatDepth32Float;
    }
    return self;
}

- (void)setBounds:(CGRect)bounds
{
    [super setBounds:bounds];
    [self setView];
}

- (void)setView
{
    const CGFloat width = super.bounds.size.width;
    const CGFloat height = super.bounds.size.height;
    
    if (width != 0 && height != 0)
    {
        const CGFloat scale = UIScreen.mainScreen.scale;
        if (!initialized)
        {
            [BabylonNativeInterop setView:bridge jsRunLoop:runLoop mktView:(__bridge void*)self width:static_cast<int>(width * scale) height:static_cast<int>(height * scale)];
            initialized = true;
        } else {
            // TODO: resize
        }
    }
}

@end

@interface EngineViewManager : RCTViewManager
@end

@implementation EngineViewManager {
    NSRunLoop* runLoop;
}

RCT_EXPORT_MODULE(EngineViewManager)

RCT_EXPORT_BLOCKING_SYNCHRONOUS_METHOD(setJSThread)
{
    runLoop = [NSRunLoop currentRunLoop];
    return nil;
}

- (UIView *)view
{
    return [[EngineView alloc] init:self.bridge runLoop:runLoop];
}

@end

//@interface RCT_EXTERN_MODULE(EngineViewManager, RCTViewManager)
//
////    RCT_EXPORT_BLOCKING_SYNCHRONOUS_METHOD(setJSThread)
////    {
////        return nil;
////    }
//RCT_EXTERN__BLOCKING_SYNCHRONOUS_METHOD(setJSThread)
//
//@end
