import { useEffect } from 'react';
import { Engine, NativeEngine } from '@babylonjs/core';
import { BabylonModule } from './BabylonModule';
import { DisposeEngine } from './EngineHelpers';

export async function useEngine(engineCallback: (engine: Engine) => (void | (() => void | undefined))) {
    useEffect(() => {
        let engine: NativeEngine | null = null;
        const state: {
            disposed: boolean,
            cleanup?: void | (() => void),
        } = {
            disposed: false,
        };

        (async () => {
            if (await BabylonModule.initialize() && !state.disposed)
            {
                // TEMP HACK: Override this because Babylon Native uses the presence of window.requestAnimationFrame to decide whether to run the native or JS code path, but React Native polyfills window.requestAnimationFrame.
                (NativeEngine.prototype as any)._queueNewFrame = function (bindedRenderFunction: any, requester: any) {
                    this._native.requestAnimationFrame(bindedRenderFunction);
                    return 0;
                };

                state.cleanup = engineCallback(engine = new NativeEngine());
            }
        })();

        return () => {
            state.disposed = true;
            if (engine) {
                if (state.cleanup) {
                    state.cleanup();
                }
                DisposeEngine(engine);
            }
        };
    }, []);
}