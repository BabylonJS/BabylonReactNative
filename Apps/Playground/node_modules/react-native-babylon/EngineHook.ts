import { useEffect, useState } from 'react';
import { Engine, NativeEngine } from '@babylonjs/core';
import { BabylonModule } from './BabylonModule';
import { DisposeEngine } from './EngineHelpers';

export function useEngine(): Engine | undefined {
    const [engine, setEngine] = useState<Engine>();

    useEffect(() => {
        let engine: Engine | undefined;
        let disposed = false;

        (async () => {
            if (await BabylonModule.initialize() && !disposed)
            {
                // TEMP HACK: Override this because Babylon Native uses the presence of window.requestAnimationFrame to decide whether to run the native or JS code path, but React Native polyfills window.requestAnimationFrame.
                (NativeEngine.prototype as any)._queueNewFrame = function (bindedRenderFunction: any, requester: any) {
                    this._native.requestAnimationFrame(bindedRenderFunction);
                    return 0;
                };

                setEngine(engine = new NativeEngine());
            }
        })();

        return () => {
            disposed = true;
            if (engine) {
                DisposeEngine(engine);
            }
        };
    }, []);

    return engine;
}