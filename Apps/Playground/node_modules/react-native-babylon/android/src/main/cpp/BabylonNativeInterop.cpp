#include <jni.h>

#include <Babylon/JsRuntime.h>
#include <Babylon/Plugins/NativeWindow.h>
#include <Babylon/Plugins/NativeEngine.h>
#include <Babylon/Polyfills/Window.h>

#include <arcana/threading/task_schedulers.h>

#include <JavaScriptCore/JavaScript.h>

#include <android/log.h>
#include <android/native_window.h>
#include <android/native_window_jni.h>

#include <optional>
#include <sstream>
#include <unistd.h>

namespace Babylon
{
    namespace
    {
        void log(const char *str)
        {
            __android_log_print(ANDROID_LOG_VERBOSE, "BabylonNative", "%s", str);
        }
    }

    class Native final
    {
    public:
        // This class must be constructed from the JavaScript thread
        Native(JSGlobalContextRef jsContext, ANativeWindow* windowPtr)
        : m_env{ Napi::Attach(jsContext) }
        {
            auto looper_scheduler = std::make_shared<looper_scheduler_t>(looper_scheduler_t::get_for_current_thread());

            JsRuntime::DispatchFunctionT dispatchFunction{[env = m_env, looper_scheduler = std::move(looper_scheduler)](std::function<void(Napi::Env)> func) {
                (*looper_scheduler)([env, func = std::move(func)]()
                {
                    func(env);
                });
            }};

            JsRuntime::CreateForJavaScript(m_env, dispatchFunction);

            auto width = static_cast<size_t>(ANativeWindow_getWidth(windowPtr));
            auto height = static_cast<size_t>(ANativeWindow_getHeight(windowPtr));

            Babylon::Plugins::NativeEngine::InitializeGraphics(windowPtr, width, height);
            Babylon::Plugins::NativeEngine::Initialize(m_env);
            Babylon::Plugins::NativeWindow::Initialize(m_env, windowPtr, width, height);

            Babylon::Polyfills::Window::Initialize(m_env);

            // TODO: This shouldn't be necessary, but for some reason results in a significant increase in frame rate. Need to figure this out.
            Babylon::Plugins::NativeEngine::Reinitialize(m_env, windowPtr, width, height);
        }

        ~Native()
        {
            Babylon::Plugins::NativeEngine::DeinitializeGraphics();
        }

        void Refresh(ANativeWindow* windowPtr)
        {
            auto width = static_cast<size_t>(ANativeWindow_getWidth(windowPtr));
            auto height = static_cast<size_t>(ANativeWindow_getHeight(windowPtr));
            Babylon::Plugins::NativeEngine::Reinitialize(m_env, windowPtr, width, height);
        }

    private:
        using looper_scheduler_t = arcana::looper_scheduler<sizeof(std::weak_ptr<Napi::Env>) + sizeof(std::function<void(Napi::Env)>)>;
        Napi::Env m_env;
    };
}

extern "C" JNIEXPORT jlong JNICALL Java_com_reactlibrary_BabylonNativeInterop_create(JNIEnv* env, jclass obj, jlong jsContextRef, jobject surface)
{
    auto jsContext = reinterpret_cast<JSGlobalContextRef>(jsContextRef);
    ANativeWindow* windowPtr = ANativeWindow_fromSurface(env, surface);
    auto native = new Babylon::Native(jsContext, windowPtr);
    return reinterpret_cast<intptr_t>(native);
}

extern "C" JNIEXPORT void JNICALL Java_com_reactlibrary_BabylonNativeInterop_refresh(JNIEnv* env, jclass obj, jlong instanceRef, jobject surface)
{
    auto native = reinterpret_cast<Babylon::Native*>(instanceRef);
    ANativeWindow* windowPtr = ANativeWindow_fromSurface(env, surface);
    native->Refresh(windowPtr);
}

extern "C" JNIEXPORT void JNICALL Java_com_reactlibrary_BabylonNativeInterop_destroy(JNIEnv* env, jclass obj, jlong instanceRef)
{
    auto native = reinterpret_cast<Babylon::Native*>(instanceRef);
    delete native;
}