package com.reactlibrary;

import android.util.Log;
import android.view.Surface;

import com.babylon.GetJsGlobalContextRef;
import com.facebook.react.bridge.JavaScriptContextHolder;
import com.facebook.react.bridge.LifecycleEventListener;
import com.facebook.react.bridge.ReactContext;

import java.util.Hashtable;
import java.util.Iterator;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

final class BabylonNativeInterop {
    // JNI interface
    static {
        System.loadLibrary("BabylonNative");
    }

    private static final Hashtable<JavaScriptContextHolder, CompletableFuture<Long>> nativeInstances = new Hashtable<>();

    private static native long create(long jsContextRef, Surface surface);
    private static native void refresh(long instanceRef, Surface surface);
    private static native void destroy(long instanceRef);

    // Must be called from the Android UI thread
    static void setView(ReactContext reactContext, Surface surface) {
        BabylonNativeInterop.destroyOldNativeInstances(reactContext);

        CompletableFuture<Long> instanceRefFuture = BabylonNativeInterop.getOrCreateFuture(reactContext);

        reactContext.runOnJSQueueThread(() -> {
            Long instanceRef = instanceRefFuture.getNow(null);
            if (instanceRef == null)
            {
                long jsContextHandle = reactContext.getJavaScriptContextHolder().get();
                if (jsContextHandle == 0) {
                    instanceRefFuture.complete(0L);
                } else {
                    GetJsGlobalContextRef getJsGlobalContextRef = new GetJsGlobalContextRef();
                    long jsContextRef = getJsGlobalContextRef.GetJsGlobalContextRef(jsContextHandle);

                    instanceRef = BabylonNativeInterop.create(jsContextRef, surface);
                    final long finalInstanceRef = instanceRef;

                    reactContext.addLifecycleEventListener(new LifecycleEventListener() {
                        @Override
                        public void onHostResume() {
                            Log.i("BabylonNativeInterop", "onHostResume");
                            // TODO: Probably call into native interop to resume (e.g. resume XR/ARCore)
                        }

                        @Override
                        public void onHostPause() {
                            Log.i("BabylonNativeInterop", "onHostPause");
                            // TODO: Probably call into native interop to pause (e.g. resume XR/ARCore)
                        }

                        @Override
                        public void onHostDestroy() {
                            Log.i("BabylonNativeInterop", "onHostDestroy");
                            BabylonNativeInterop.destroyOldNativeInstances(null);
                        }
                    });

                    instanceRefFuture.complete(finalInstanceRef);
                }
            } else if (instanceRef != 0) {
                BabylonNativeInterop.refresh(instanceRef, surface);
            }
        });
    }

    // Must be called from the Android UI thread
    static CompletionStage<Long> whenInitialized(ReactContext reactContext) {
        return BabylonNativeInterop.getOrCreateFuture(reactContext);
    }

    private static CompletableFuture<Long> getOrCreateFuture(ReactContext reactContext) {
        JavaScriptContextHolder jsContext = reactContext.getJavaScriptContextHolder();
        CompletableFuture<Long> instanceRefFuture = BabylonNativeInterop.nativeInstances.get(jsContext);
        if (instanceRefFuture == null)
        {
            instanceRefFuture = new CompletableFuture<>();
            BabylonNativeInterop.nativeInstances.put(jsContext, instanceRefFuture);
        }
        return instanceRefFuture;
    }

    private static void destroyOldNativeInstances(ReactContext currentReactContext) {
        Iterator<Map.Entry<JavaScriptContextHolder, CompletableFuture<Long>>> nativeInstanceIterator = BabylonNativeInterop.nativeInstances.entrySet().iterator();
        while (nativeInstanceIterator.hasNext()) {
            Map.Entry<JavaScriptContextHolder, CompletableFuture<Long>> nativeInstanceInfo = nativeInstanceIterator.next();
            if (currentReactContext == null || nativeInstanceInfo.getKey() != currentReactContext.getJavaScriptContextHolder()) {
                Long oldInstanceRef = nativeInstanceInfo.getValue().getNow(null);
                if (oldInstanceRef != null && oldInstanceRef != 0) {
                    BabylonNativeInterop.destroy(oldInstanceRef);
                }
                nativeInstanceIterator.remove();
            }
        }
    }
}
